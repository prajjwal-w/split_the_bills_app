1: User Table

CREATE TABLE users (
	user_id SERIAL PRIMARY KEY,
	first_name varchar(255),
	last_name varchar(255),
	password varchar(255),
	phone varchar(12),
	email varchar(255),
	token varchar,
	user_type varchar,
	refresh_token varchar,
	created_at timestamp,
	updated_at timestamp
)



2: FriendShip Table

CREATE TABLE friendships (
    friendship_id SERIAL PRIMARY KEY,
    user1_id INT,
    user2_id INT,
    FOREIGN KEY (user1_id) REFERENCES users(user_id),
    FOREIGN KEY (user2_id) REFERENCES users(user_id)
);

CREATE UNIQUE INDEX unique_friendship_idx 
ON friendships (LEAST(user1_id, user2_id), GREATEST(user1_id, user2_id));


3: Group Table

Create table groups(
	group_id Serial primary key,
	group_name varchar(255) not null,
	description text,
	created_by int,
	created_at timestamp,
	Foreign Key (created_by) References users(user_id)
);

4: Group_Members Table

Create table group_users(
	group_id int not null references groups(group_id),
	user_id int not null references users(user_id),
	Primary Key (group_id, user_id)
	
)

5: Expenses table

create table expenses(
	expense_id SERIAL primary key,
	amount decimal(10,2),
	description text,
	paid_by int not null,
	group_id int references groups(group_id),
	created_at timestamp,
    Foreign Key (paid_by) references users(user_id),
	
)

6: expense_split table

create table expense_splits(
	splits_id SERIAL primary key,
	expense_id int not null references expenses(expense_id),
	user_id int not null references users(user_id),
	split_amt Decimal(10, 2),
	status text,
	Unique(expense_id, user_id)
)
